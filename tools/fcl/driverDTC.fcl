# FHiCL document used to run the "driver" executable. To learn more
#  about the FHiCL language, please look at
#  cdcvs.fnal.gov/redmine/documents/327 , the "FHiCL Quick Start Guide"

events_to_generate: 10
run_number: 101

fragment_receiver: {

   # Parameters defining and configuring the fragment generator to be used
   		    
   generator: DTCReceiver 
   ring_0_roc_count: 1
   ring_0_timing_enabled: false
   debug_print: true

   # Parameters configuring the fragment generator's parent class
   # artdaq::CommandableFragmentGenerator

   fragment_id: 0
   board_id: 0
}  		  

event_builder: {

  expected_fragments_per_event: 1
  use_art: true
  print_event_store_stats: false
  verbose: false
  events_expected_in_SimpleQueueReader: @local::events_to_generate
}

######################################################################
# The ART code
######################################################################

physics:
{
  analyzers:
  {
#    dtcDump:
#    {
#      module_type: DTCDump
#      raw_data_label: daq
#      frag_type: @local::fragment_receiver.fragment_type
#      num_packets_to_show: 2 # DataHeaderPacket and up to num_packets_to_show - 1 DataPackets
#    }
  }

#  a1: [ dtcDump ]
  e1: [ out1, rootout ]
#  end_paths: [ a1 ]
}

outputs:
{
 rootout:
  {
    module_type: RootOutput
    fileName: "driver.root"
    compressionLevel: 0
  }
  out1:
  {
    module_type: FileDumperOutput
    wantProductFriendlyClassName: true
  }
}

source:
{
module_type: RawInput
waiting_time: 900
resume_after_timeout: true
fragment_type_map: [[2, "DTC"] ]
}

process_name: Driver



