# FHiCL document used to run the "driver" executable. To learn more
#  about the FHiCL language, please look at
#  cdcvs.fnal.gov/redmine/documents/327 , the "FHiCL Quick Start Guide"

events_to_generate: 2 # was 1 #Was 2
run_number: 101
debug_cout: true
transition_timeout: 30

fragment_receiver: {

   # Parameters defining and configuring the fragment generator to be used
   		    
   generator: STMReceiver 
   sim_mode: Disabled # F
   raw_output_enable: false # true
   raw_output_file: "Mu2eReceiver.bin"
   debug_print: false
   null_heartbeats_after_requests: 16
   dtc_position_in_chain: 0
   n_dtcs_in_chain: 1
   dtc_id: -1
   roc_mask: 0x1
   dtc_fw_version: ""
   skip_dtc_init: false
   simulator_memory_file_name: "mu2esim_driver.bin"
   cfo_config: {
     use_dtc_cfo_emulator: true
     debug_packet_count: 0
     debug_type: 2
     sticky_debug_type: false
     quiet: false
     asyncRR: false
     force_no_debug_mode: false
     useCFODRP: false
   }
   load_sim_file: false # true
   sim_file: "DTC_packets.bin" # Overridden by $DTCLIB_SIM_FILE

   from_input_file : true
   input_file: "/scratch/mu2e/mu2estm_mu2e_work_area/InputData/raw.mu2e.STM_ELBE_2022.LaBrRaw.101032_00000000.dat"
   to_output_file : true
   output_file : "stmReceiver.bin"

   # Parameters configuring the fragment generator's parent class
   # artdaq::CommandableFragmentGenerator

   fragment_id: 0
   board_id: 0
   max_fragment_size_bytes: 0x100000
}  		  

event_builder: {

  expected_fragments_per_event: 1
  use_art: true
  print_event_store_stats: false
  verbose: false
  events_expected_in_SimpleQueueReader: @local::events_to_generate
  init_fragment_count: 0
  buffer_count: 1
   max_fragment_size_bytes: 0x100000
}

######################################################################
# The ART code
######################################################################

physics:
{
  analyzers:
  {
    dtcDump:
    {
      module_type: DTCEventDump
      raw_output_file: "DTCEventDump.bin" # Will have timestamp inserted
      raw_output_in_detector_emulator_format: false
    }
  }

#  a1: [ dtcDump ]
  a1 : [ ]
  e1: [ out1, rootout ]
}

outputs:
{
 rootout:
  {
    module_type: RootOutput
    fileName: "driver.root"
    compressionLevel: 0
  }
  out1:
  {
    module_type: FileDumperOutput
    wantProductFriendlyClassName: true
  }
}

source:
{
module_type: ArtdaqInput
}

services: {
    ArtdaqFragmentNamingServiceInterface: { service_provider: ArtdaqFragmentNamingService helper_plugin: Mu2e}
    ArtdaqSharedMemoryServiceInterface: { service_provider: ArtdaqSharedMemoryService
waiting_time: 900
resume_after_timeout: true }
}

process_name: Driver



