# -*- mode: tcl -*-
# FHiCL document used to run the "driver" executable. To learn more
#  about the FHiCL language, please look at
#  cdcvs.fnal.gov/redmine/documents/327 , the "FHiCL Quick Start Guide"
#
# Example fcl file for converting TRK artdaq fragments into StrawDigi
# DataProdcuts using the DAQ/Mu2eProducer module in Offline

#include "minimalMessageService.fcl"
#include "standardProducers.fcl"
#include "standardServices.fcl"

#include "TrkFilters/fcl/prolog.fcl"
#include "TrkDiag/fcl/prolog.fcl"

#events_to_generate: 20
events_to_generate: 1
run_number: 101

fragment_receiver: {

  # Parameters defining and configuring the fragment generator to be used

  generator: Mu2eReceiver
  ring_0_roc_count: 1
  ring_0_timing_enabled: false
  debug_print: false
  verbose: false
  raw_output_enable: false
  raw_output_file: "mu2eReceiver.bin"

  #sim_file: ""

  fragment_id: 0
  board_id: 0
}

event_builder: {
  expected_fragments_per_event: 1
  use_art: true
  print_event_store_stats: false
  verbose: false
  events_expected_in_SimpleQueueReader: @local::events_to_generate
}

######################################################################
# The ART code
######################################################################

services : @local::Services.SimAndReco

services.message               : @local::default_message
services.TFileService          : { fileName : "trig.root" }

services.GeometryService        : { inputFile      : "Mu2eG4/geom/geom_common_cd3_s4p2.txt" }
services.ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt"      }
services.GlobalConstantsService : { inputFile      : "Mu2eG4/test/globalConstants_01.txt" }
services.BTrkHelper : @local::BTrkHelperDefault

physics:
{

  producers:
  {

    #Declare tracking producers
    @table::Tracking.producers

    makeSD:
    {
      module_type: Mu2eProducer
      debug: false
    }

  }

  filters : {
    @table::Tracking.filters
  }

  analyzers:
  {

#    TrkRecoDiag : @local::TrkRecoDiag
#    TrkTriggerDiag : {
#      module_type : TrkTriggerDiag
##      debugLevel : 1
#    }

#    OfflineDump:
#    {
#      module_type: OfflineFragmentsDumper
#    }
  }

  prod_sequence : [ makeSD ]

  e2: [ rootout ]
#  e2: [ TrkRecoDiag, rootout ]
  end_paths: [ e2 ]

}

outputs:
{
  rootout:
  {
    module_type: RootOutput
    fileName: "driver.root"
    compressionLevel: 0

    outputCommands: [ "keep *_*_*_*",
                      "drop *_daq_*_*" ]
  }

  out1:
  {
    module_type: FileDumperOutput
    wantProductFriendlyClassName: true
  }

}

source:
{
  module_type: OfflineFragmentReader
  waiting_time: 900
  resume_after_timeout: true
}

#physics.TCTrigPath : [ @sequence::physics.prod_sequence,
#		       @sequence::Tracking.Trigger.TCFilterSequence ]
#
#physics.PHTrigPath : [ @sequence::physics.prod_sequence,
#		       @sequence::Tracking.Trigger.PosHelixFilterSequence ]

physics.DeMSeedTrigPath : [ @sequence::physics.prod_sequence,
			    @sequence::Tracking.Trigger.DeMSeedFilterSequence ]

#physics.UeMSeedTrigPath : [ @sequence::physics.prod_sequence,
#			    @sequence::Tracking.Trigger.UeMSeedFilterSequence ]

physics.DeMKalTrigPath : [ @sequence::physics.prod_sequence,
			   @sequence::Tracking.Trigger.DeMKalFilterSequence ]

#outputs.rootout.SelectEvents : [TCTrigPath, PHTrigPath, DeMSeedTrigPath, DeMKalTrigPath ]
outputs.rootout.SelectEvents : [ DeMSeedTrigPath, DeMKalTrigPath ]

services.SeedService.baseSeed         :  773651
services.SeedService.maxUniqueEngines :  20

process_name: Driver

